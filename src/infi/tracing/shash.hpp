//////////////////////////////////////////////////////////////////////////////
//Copyright Â© 2013 Dustin Juliano. All rights reserved.
//http://dustinjuliano.com
//2013.08.01
//
//New BSD License
//
//Redistribution and use in source and binary forms, with or without
//modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of Dustin Juliano nor the
//      names of contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL DUSTIN JULIANO BE LIABLE FOR ANY
//DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//////////////////////////////////////////////////////////////////////////////
#pragma once
#include "smem.hpp"
#include <string.h>
//////////////////////////////////////////////////////////////////////////////
//high entropy tables
//////////////////////////////////////////////////////////////////////////////
static uint8_t _rnd_a[] = {
    0x1D, 0x94, 0x33, 0x0A, 0x2E, 0x57, 0xF0, 0xDA, 0xFA, 0x33, 0x57, 0x70, 0x71,
    0x4A, 0x23, 0x73, 0x74, 0x4B, 0x54, 0x4B, 0xC7, 0x11, 0x6E, 0xA2, 0xCA, 0x01,
    0x14, 0xE2, 0x24, 0x3D, 0x35, 0xBB, 0x2F, 0xAA, 0x64, 0x62, 0xBB, 0xE6, 0x14,
    0xBB, 0xD1, 0x15, 0x91, 0x69, 0x49, 0x41, 0x67, 0xC3, 0x79, 0x98, 0x79, 0x31,
    0x06, 0x5D, 0xD2, 0x56, 0x48, 0x92, 0x27, 0xD6, 0x30, 0x42, 0x4D, 0x54, 0xEC,
    0xE3, 0x62, 0xE5, 0x03, 0x39, 0xE9, 0xD0, 0xE1, 0x7E, 0xF1, 0xDC, 0x20, 0x13,
    0xDF, 0xD5, 0xC4, 0x26, 0x07, 0x85, 0xED, 0x32, 0x90, 0x39, 0xB5, 0xBE, 0x6C,
    0x10, 0x69, 0x44, 0xCB, 0x58, 0x52, 0x87, 0xF5, 0xCD, 0x81, 0x22, 0x27, 0xF3,
    0x1D, 0xD0, 0xFF, 0xC1, 0xBF, 0x2A, 0x97, 0x16, 0x7B, 0x0D, 0x86, 0x0E, 0xA6,
    0xD4, 0x49, 0xC4, 0x54, 0xD0, 0x23, 0x9A, 0x14, 0xFD, 0xA9, 0x0C, 0xE0, 0x3B,
    0x4A, 0xC8, 0x85, 0x2A, 0x09, 0xCC, 0x8B, 0x03, 0x6A, 0x28, 0x7D, 0x88, 0x38,
    0x36, 0x2E, 0x7B, 0x13, 0x6E, 0xCC, 0xBF, 0xE6, 0x41, 0x45, 0x41, 0x40, 0xD4,
    0xED, 0xF9, 0x73, 0x61, 0xEF, 0x72, 0x36, 0x4E, 0x12, 0x90, 0x67, 0x74, 0x9A,
    0x02, 0x12, 0xE8, 0x5D, 0x90, 0x99, 0x4A, 0xA2, 0xDE, 0x0C, 0xEA, 0xA2, 0x99,
    0x39, 0x97, 0xD7, 0x45, 0xFD, 0xA5, 0x15, 0x25, 0x63, 0x9D, 0xF6, 0xC0, 0x32,
    0xCF, 0x89, 0xAE, 0xFC, 0x80, 0x81, 0x3A, 0x81, 0xA7, 0x2F, 0xB7, 0xF8, 0x3C,
    0xAB, 0x93, 0x6F, 0x50, 0x78, 0x45, 0xED, 0xCE, 0x56, 0x65, 0x63, 0x6F, 0x1E,
    0xE9, 0xB7, 0x86, 0x2D, 0x94, 0xEB, 0xEB, 0x39, 0x93, 0x4F, 0x76, 0x89, 0xA5,
    0x01, 0x70, 0x71, 0x81, 0x58, 0x16, 0x63, 0x3B, 0xD1, 0xC5, 0xA2, 0x2B, 0xF9,
    0x9A, 0x40, 0xD2, 0xCC, 0xC6, 0xFC, 0xE2, 0xB0, 0xD3};
static uint8_t _rnd_b[] = {
    0xB0, 0x98, 0x8E, 0xC4,
    0x61, 0x18, 0x4D, 0xEC, 0xE8, 0xFA, 0x1F, 0x41, 0xCD, 0x17, 0xF0, 0xBD, 0xE4,
    0xB8, 0xDE, 0x26, 0xEF, 0x80, 0x7D, 0x64, 0x7D, 0xE3, 0xB7, 0x0F, 0x9C, 0xEF,
    0xA6, 0x5C, 0x24, 0xA4, 0x0E, 0x81, 0x06, 0xAA, 0x0A, 0xC0, 0x42, 0xF9, 0x61,
    0x6F, 0xE8, 0x05, 0x22, 0x39, 0x2B, 0x0D, 0x93, 0xD1, 0xF8, 0x2F, 0xC2, 0xAD,
    0xA9, 0xFD, 0xCD, 0x32, 0x49, 0x30, 0x98, 0x50, 0x5B, 0x12, 0xDA, 0x50, 0x98,
    0x1F, 0x13, 0x54, 0xD8, 0x80, 0x84, 0xCC, 0x28, 0x52, 0x92, 0xD2, 0x9F, 0x73,
    0x13, 0x95, 0xBD, 0x5A, 0xC3, 0x53, 0x83, 0xB4, 0xE7, 0x03, 0xD7, 0x34, 0xDC,
    0xB0, 0x9C, 0x70, 0xAB, 0xE3, 0xFE, 0x4A, 0x49, 0xA5, 0x71, 0x16, 0xF6, 0xF1,
    0x57, 0x7A, 0x89, 0x28, 0x0C, 0x36, 0x14, 0x9D, 0xB1, 0x29, 0xA5, 0xA7, 0x8A,
    0x1E, 0x2D, 0x7A, 0x9A, 0x7E, 0x44, 0xA2, 0x45, 0x74, 0xD1, 0xD6, 0x50, 0xB9,
    0x60, 0x6B, 0xC8, 0x36, 0x12, 0x84, 0xC9, 0xBB, 0x1B, 0xD4, 0x87, 0x8F, 0x6C,
    0xF1, 0x9F, 0x95, 0x12, 0x15, 0x96, 0x82, 0xEA, 0x0C, 0x4E, 0xE9, 0x6E, 0x80,
    0xFF, 0xCB, 0xBE, 0x96, 0xDF, 0x4E, 0x75, 0x81, 0x54, 0x26, 0x3C, 0xFE, 0x69,
    0x77, 0xC1, 0xF4, 0x52, 0x62, 0xD3, 0x10, 0x2A, 0xEA, 0x42, 0x08, 0x00, 0xF5,
    0x8A, 0xCA, 0x7E, 0x05, 0x79, 0xB4, 0xFD, 0xF4, 0x5A, 0x6F, 0x78, 0xF4, 0x41,
    0xFE, 0x0D, 0x75, 0x5B, 0x7F, 0xD5, 0x11, 0xFE, 0xC8, 0xE3, 0x59, 0x72, 0xCB,
    0xA2, 0x08, 0x74, 0xFB, 0x95, 0x51, 0x1A, 0x5A, 0x75, 0x52, 0x1E, 0xC9, 0x6C,
    0x85, 0x3A, 0x33, 0xD7, 0x02, 0x3C, 0xC5, 0x3D, 0x47, 0x09, 0xE9, 0xF4, 0x34,
    0x8B, 0x71, 0x1A, 0xF4, 0xFD, 0x8D, 0x50, 0x46, 0xE3, 0x4C, 0x97, 0xF0, 0x8F,
    0xB0, 0xC1, 0xEC, 0x71, 0x39};
static uint8_t _rnd_c[] = {
    0x9D, 0x57, 0x0D, 0x56, 0x27, 0x56, 0x33, 0x29,
    0xDD, 0xC2, 0xE8, 0x76, 0x8A, 0x11, 0xD3, 0xF6, 0x11, 0xBC, 0xF8, 0x24, 0xED,
    0x73, 0x52, 0xD1, 0xA4, 0xC1, 0xE8, 0x86, 0xF1, 0x31, 0xB2, 0x45, 0xFC, 0x18,
    0x74, 0x58, 0xE0, 0x36, 0x9D, 0x98, 0x0C, 0x68, 0xC0, 0x90, 0x3E, 0x13, 0x13,
    0xC3, 0x49, 0x97, 0x82, 0xCA, 0xCA, 0x0D, 0x7C, 0xCF, 0xC0, 0x79, 0x69, 0x06,
    0x5F, 0xF9, 0x72, 0x52, 0xAC, 0xAD, 0x7B, 0xD7, 0x2E, 0xF2, 0xFC, 0x1A, 0xA1,
    0x94, 0xAC, 0xC0, 0x8A, 0x4D, 0x21, 0x77, 0x8A, 0x9B, 0x1F, 0x66, 0x66, 0x72,
    0x59, 0x97, 0xAA, 0x43, 0x7F, 0xE4, 0xB5, 0x66, 0xDA, 0x93, 0x7C, 0x18, 0xA3,
    0x85, 0x1D, 0xDA, 0x18, 0x2A, 0x3A, 0xA7, 0xBF, 0x80, 0x78, 0x04, 0x94, 0xD0,
    0x3D, 0x3D, 0x7B, 0x2F, 0x64, 0x8D, 0x61, 0x22, 0x3E, 0x15, 0xE7, 0xF6, 0x73,
    0x9F, 0x1A, 0xF3, 0x56, 0xF7, 0xAC, 0x1C, 0x76, 0xC0, 0x95, 0x7B, 0x7C, 0x0C,
    0x3D, 0xF4, 0x2B, 0xEA, 0x4A, 0x78, 0x79, 0xB8, 0x49, 0x3A, 0x9B, 0x0A, 0x2E,
    0x2D, 0x4C, 0xEA, 0x14, 0xAB, 0x8A, 0x8D, 0xFB, 0xB3, 0x9E, 0x20, 0x28, 0x04,
    0x2F, 0xD2, 0x5B, 0xF0, 0x9F, 0x9C, 0x0E, 0x22, 0xF1, 0x3B, 0x60, 0x4F, 0x2E,
    0x6B, 0x16, 0x5C, 0xD5, 0xD3, 0x2B, 0x6B, 0x7F, 0xDC, 0x63, 0x66, 0x71, 0x6E,
    0xE6, 0xA1, 0x6A, 0x7A, 0x37, 0x32, 0x70, 0x29, 0x8A, 0x2C, 0xC8, 0x4F, 0x67,
    0x09, 0xDC, 0xE3, 0xD5, 0x71, 0xDE, 0x38, 0xD8, 0xCE, 0x5E, 0x41, 0x90, 0x76,
    0xE6, 0x4F, 0xD1, 0x12, 0xC2, 0x7C, 0x03, 0x81, 0xB3, 0x4D, 0xF0, 0xB5, 0xBC,
    0xAE, 0x25, 0x47, 0x33, 0x88, 0x85, 0x23, 0x52, 0x9C, 0x04, 0xD4, 0x84, 0xB8,
    0x2A, 0xD9, 0x33, 0x60, 0x76, 0xCA, 0xEE, 0xAB, 0x65, 0x90, 0xAB, 0x6A, 0x8A,
    0xF4};
static uint8_t _rnd_d[] = {
    0xB9, 0xB6, 0x2C, 0xD5, 0xA5, 0x5F, 0x5E, 0xC4, 0x8C, 0x9B, 0xA4, 0xD7,
    0x5B, 0x39, 0x0D, 0xF5, 0x10, 0xFB, 0x37, 0xFB, 0xFA, 0x6C, 0xDD, 0x29, 0xBB,
    0x04, 0x77, 0xD2, 0x4E, 0xFD, 0xB7, 0xB8, 0x27, 0xC7, 0x34, 0x65, 0x3A, 0x8F,
    0x70, 0xB7, 0x88, 0xEC, 0x44, 0x43, 0x5F, 0xC6, 0x2E, 0x71, 0x4F, 0x46, 0x59,
    0xBD, 0xAE, 0x30, 0x15, 0x3A, 0x3A, 0xAD, 0x07, 0x0F, 0x0D, 0xAD, 0x67, 0xD1,
    0x16, 0x6A, 0x78, 0x16, 0x3E, 0xDD, 0xE7, 0x3E, 0x8A, 0x75, 0x83, 0xB9, 0xDC,
    0xF1, 0xF3, 0x1C, 0x2D, 0x17, 0xFA, 0xC2, 0xAC, 0x7B, 0x31, 0x2B, 0x09, 0x16,
    0x71, 0x81, 0xCA, 0x3B, 0x03, 0x60, 0x72, 0xE5, 0x9B, 0x60, 0x04, 0xCA, 0x15,
    0x95, 0x77, 0x5D, 0xA7, 0x8E, 0xE9, 0x14, 0xA2, 0x67, 0x43, 0xA7, 0xDC, 0xF1,
    0x8E, 0xDA, 0xCC, 0xA9, 0xE1, 0xF9, 0xDB, 0x4B, 0x58, 0x84, 0x49, 0x7F, 0x90,
    0x2A, 0xBC, 0x4E, 0xDC, 0xDA, 0x89, 0xF7, 0x35, 0xB4, 0x21, 0xDD, 0xC2, 0xFF,
    0x96, 0xA5, 0x28, 0x4B, 0x7F, 0x8B, 0x80, 0xA4, 0x16, 0xEA, 0xC6, 0xAD, 0x04,
    0x68, 0x16, 0x58, 0xC3, 0x30, 0xC8, 0x2F, 0x03, 0x8E, 0x5B, 0xED, 0x8A, 0x76,
    0x52, 0xC3, 0xC7, 0xB1, 0x55, 0x2D, 0xCE, 0xD4, 0xC1, 0x70, 0xED, 0x31, 0x19,
    0xA0, 0xD9, 0xE5, 0xD4, 0x21, 0x96, 0x65, 0xBD, 0xD7, 0x9F, 0xFB, 0x31, 0x19,
    0xE7, 0x73, 0x23, 0x25, 0x44, 0x0C, 0xC2, 0x56, 0x67, 0x53, 0xB6, 0x2E, 0x43,
    0xC3, 0xFF, 0xB6, 0x48, 0x7A, 0x9B, 0xEF, 0x19, 0xC0, 0xC8, 0x53, 0x75, 0x93,
    0x3C, 0x1B, 0x48, 0x1F, 0x10, 0xAB, 0x5D, 0x6D, 0x23, 0x7A, 0xF0, 0x3C, 0x65,
    0x4F, 0x2C, 0x12, 0x17, 0xFD, 0x3E, 0x29, 0xAF, 0x02, 0xE3, 0x94, 0xB9, 0x6B,
    0x18, 0xF6, 0x77, 0x2B, 0xE5, 0xE3, 0x9E, 0x1E, 0xA8, 0xEF};
//////////////////////////////////////////////////////////////////////////////
//class shash
//
//time efficient static hash map (up to 10x faster than fixed_map for large n)
//* strong entropic mixing (tuned for unpredictable key input)
//* static allocator (in-place memory management via smem)
//* linked chaining (stable performance under high load factor)
//////////////////////////////////////////////////////////////////////////////
template <typename T>
class shash {
//////////////////////////////////////////////////////////////////////////////
//member data
//////////////////////////////////////////////////////////////////////////////
protected:
    struct node {
        uint64_t key;
        node *next;
        T val;
    };
    const uint64_t m_capacity;
    const uint64_t m_mod;
    uint64_t m_count;
    smem<node> m_mem;
    node **m_buckets;
    node *m_itr;
    uint64_t m_itrpos;
//////////////////////////////////////////////////////////////////////////////
//member functions
//////////////////////////////////////////////////////////////////////////////
public:
    //////////////////////////////////////////////////////////////////////////////
    //constructor
    //////////////////////////////////////////////////////////////////////////////
    shash(uint64_t maxbuckets) :
        m_capacity(maxbuckets),
        m_mod(maxbuckets - 1),
        m_count(0),
        m_mem(maxbuckets),
        m_itr(NULL),
        m_itrpos(0)
    {
        if ((maxbuckets & m_mod) || (!maxbuckets)) throw std::runtime_error("shash: maxbuckets must be a power of two.");
        m_buckets = new node*[maxbuckets];
        if (!m_buckets) throw std::bad_alloc();
        memset(m_buckets, 0, sizeof(node*)*maxbuckets);
    }//constructor
    //////////////////////////////////////////////////////////////////////////////
    //destructor
    //////////////////////////////////////////////////////////////////////////////
    ~shash() { if (m_buckets) delete[] m_buckets; }//destructor
    //////////////////////////////////////////////////////////////////////////////
    //insert
    //
    //takes 32-bit key and returns a pointer to value
    //returns pointer to available slot on success
    //NULL on failure
    //////////////////////////////////////////////////////////////////////////////
    T* insert(register const uint64_t key) {
        if (m_count >= m_capacity) return NULL;
        register const uint64_t mkey = (
            ((key >> 24) ^ (uint64_t(_rnd_a[((key >> 24)       )]) << 24)) +
            ((key >> 16) ^ (uint64_t(_rnd_b[((key >> 16) & 0xFF)]) << 16)) +
            ((key >> 8 ) ^ (uint64_t(_rnd_c[((key >> 8 ) & 0xFF)]) << 8 )) +
            ((key      ) ^ (uint64_t(_rnd_d[((key      ) & 0xFF)])      )))
            & m_mod;
        register node **__restrict p = m_buckets + mkey;
        //find open bucket
        while(*p) {
            if ((*p)->key == key) return NULL;
            else p = &((*p)->next);
        }//while
        *p = m_mem.alloc();
        (*p)->key = key;
        (*p)->next = NULL;
        ++m_count;
        return &((*p)->val);
    }//insert
    //////////////////////////////////////////////////////////////////////////////
    //erase
    //
    //removes key from hash map
    //returns non-zero on failure
    //////////////////////////////////////////////////////////////////////////////
    int erase(register const uint64_t key) {
        register const uint64_t mkey = (
            ((key >> 24) ^ (uint64_t(_rnd_a[((key >> 24)       )]) << 24)) +
            ((key >> 16) ^ (uint64_t(_rnd_b[((key >> 16) & 0xFF)]) << 16)) +
            ((key >> 8 ) ^ (uint64_t(_rnd_c[((key >> 8 ) & 0xFF)]) << 8 )) +
            ((key      ) ^ (uint64_t(_rnd_d[((key      ) & 0xFF)])      )))
            & m_mod;
        register node **p = m_buckets + mkey;
        //find key
        while(*p) {
            if ((*p)->key == key) {
                node *d = *p;
                *p = (*p)->next;
                m_mem.free(d);
                --m_count;
                return 0;
            }//if
            else p = &((*p)->next);
        }//while
        return -1;
    }//erase
    //////////////////////////////////////////////////////////////////////////////
    //find
    //
    //finds key in hash map and returns value pointer
    //returns NULL on failure
    //////////////////////////////////////////////////////////////////////////////
    T* find(register const uint64_t key) {
        register const uint64_t mkey = (
            ((key >> 24) ^ (uint64_t(_rnd_a[((key >> 24)       )]) << 24)) +
            ((key >> 16) ^ (uint64_t(_rnd_b[((key >> 16) & 0xFF)]) << 16)) +
            ((key >> 8 ) ^ (uint64_t(_rnd_c[((key >> 8 ) & 0xFF)]) << 8 )) +
            ((key      ) ^ (uint64_t(_rnd_d[((key      ) & 0xFF)])      )))
            & m_mod;
        register node *__restrict p = m_buckets[mkey];
        //find key
        while (p) {
            if (p->key == key) return &(p->val);
            else p = p->next;
        }//while
        return NULL;
    }//find
    //////////////////////////////////////////////////////////////////////////////
    //clear
    //
    //clears the hash map
    //////////////////////////////////////////////////////////////////////////////
    void clear() {
        m_mem.purge();
        m_count = 0;
        if (m_buckets) memset(m_buckets, 0, sizeof(node*)*m_capacity);
    }//clear
    //////////////////////////////////////////////////////////////////////////////
    //root
    //sets the internal index to the root
    //warning: operations on the hash map invalidate the internal index
    //////////////////////////////////////////////////////////////////////////////
    void root() {
        if (m_buckets)
            m_itr = m_buckets[0];
        else m_itr = NULL;
        m_itrpos = 0;
    }//root
    //////////////////////////////////////////////////////////////////////////////
    //get
    //returns the current internal index or NULL if end of list
    //advances internal index
    //warning: operations on the hash map invalidate the internal index
    //this walks through each bucket, and each item in the chain
    //////////////////////////////////////////////////////////////////////////////
    T* next() {
        begin:
        if (m_itr) {
            //within chain; store for return
            node *__restrict p = m_itr;
            //advance chain blindly and return
            m_itr = m_itr->next;
            return &(p->val);
        }//if
        else if (m_itrpos >= m_mod) {
            //in case of repeated calls to next() past m_mod
            return NULL;
        }//else if
        else {
            //end of chain or end of position
            ++m_itrpos;
            if (m_itrpos >= m_mod)
                return NULL;
            //next bucket, descend into chain
            m_itr = m_buckets[m_itrpos];
            goto begin;
        }//else
    }//next
    //////////////////////////////////////////////////////////////////////////////
};//class shash
//////////////////////////////////////////////////////////////////////////////